use sea_orm::{
    ActiveModelTrait, ColumnTrait, EntityTrait, QueryFilter, QuerySelect, RelationTrait, Set,
};
use sea_query::{Condition, JoinType};

use huevos_entity::{package, package_vulnerability, vulnerability};

use crate::system::System;
use crate::Purl;

impl System {
    pub async fn ingest_vulnerability(
        &self,
        identifier: &str,
    ) -> Result<vulnerability::Model, anyhow::Error> {
        match vulnerability::Entity::find()
            .filter(Condition::all().add(vulnerability::Column::Identifier.eq(identifier.clone())))
            .one(&*self.db)
            .await?
        {
            None => {
                let entity = vulnerability::ActiveModel {
                    identifier: Set(identifier.to_string()),
                    ..Default::default()
                };

                Ok(entity.insert(&*self.db).await?)
            }
            Some(found) => Ok(found),
        }
    }

    pub async fn vulnerabilities(&self) -> Result<Vec<vulnerability::Model>, anyhow::Error> {
        Ok(vulnerability::Entity::find().all(&*self.db).await?)
    }

    pub async fn ingest_package_vulnerability<'p, P: Into<Purl<'p>>>(
        &self,
        package: P,
        vulnerability_identifier: &str,
    ) -> Result<package_vulnerability::Model, anyhow::Error> {
        let package = self.ingest_package(package).await?;

        let vulnerability = self.ingest_vulnerability(vulnerability_identifier).await?;

        match package_vulnerability::Entity::find()
            .filter(
                Condition::all()
                    .add(package_vulnerability::Column::PackageId.eq(package.id))
                    .add(package_vulnerability::Column::VulnerabilityId.eq(vulnerability.id)),
            )
            .one(&*self.db)
            .await?
        {
            None => Ok(package_vulnerability::ActiveModel {
                package_id: Set(package.id),
                vulnerability_id: Set(vulnerability.id),
                ..Default::default()
            }
            .insert(&*self.db)
            .await?),
            Some(found) => Ok(found),
        }
    }

    pub async fn direct_vulnerabilities<'p, P: Into<Purl<'p>>>(
        &self,
        package: P,
    ) -> Result<Vec<vulnerability::Model>, anyhow::Error> {
        let package_id = self.ingest_package(
            package
        ).await?.id;

        let result = vulnerability::Entity::find()
            .join_rev(
                JoinType::InnerJoin,
                package_vulnerability::Relation::Vulnerability.def()
            )
            //.join(
                //JoinType::InnerJoin,
                //package_vulnerability::Relation::Package.def(),
            //)
            .having( package_vulnerability::Column::PackageId.eq(package_id))
            .group_by(vulnerability::Column::Id)
            .group_by(package_vulnerability::Column::Id)
            .all(&*self.db)
            .await?;

        println!("{:#?}", result);

        todo!()
    }
}

#[cfg(test)]
mod tests {
    use crate::system::System;

    #[tokio::test]
    async fn ingest_vulnerabilities() -> Result<(), anyhow::Error> {
        let system = System::start().await?;
        system.bootstrap().await?;

        system.ingest_vulnerability("CVE-123").await?;

        system.ingest_vulnerability("CVE-123").await?;

        system.ingest_vulnerability("CVE-123").await?;

        system.ingest_vulnerability("CVE-456").await?;

        let vulns = system.vulnerabilities().await?;

        println!("{:#?}", vulns);

        Ok(())
    }

    #[tokio::test]
    async fn ingest_package_vulnerability() -> Result<(), anyhow::Error> {
        let system = System::start().await?;
        system.bootstrap().await?;

        system.ingest_vulnerability("CVE-123").await?;

        system.ingest_vulnerability("CVE-123").await?;

        system.ingest_vulnerability("CVE-123").await?;

        system.ingest_vulnerability("CVE-456").await?;
        system.ingest_vulnerability("CVE-8675309").await?;

        let ingested = system
            .ingest_package_vulnerability(
                "pkg:maven/io.quarkus/quarkus-jdbc-postgresql@2.13.5.Final?type=jar",
                "CVE-123",
            )
            .await?;

        let found = system.direct_vulnerabilities(
            "pkg:maven/io.quarkus/quarkus-jdbc-postgresql@2.13.5.Final?type=jar",
        ).await?;

        println!("{:#?}", ingested);

        Ok(())
    }
}
