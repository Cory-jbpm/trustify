use crate::{package, vulnerability};
use sea_orm::entity::prelude::*;
use sea_orm::FromQueryResult;

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]
#[sea_orm(table_name = "package_vulnerability")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub timestamp: DateTimeWithTimeZone,
    pub package_id: i32,
    pub vulnerability_id: i32,
    pub source: String,
}

#[derive(FromQueryResult, Debug)]
pub struct PackageVulnerability {
    pub identifier: String,
    pub source: String,
    pub timestamp: DateTimeWithTimeZone,

}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::package::Entity",
        from = "super::package_vulnerability::Column::PackageId"
        to = "super::package::Column::Id")]
    Package,
    #[sea_orm(
        belongs_to = "super::vulnerability::Entity",
        from = "super::package_vulnerability::Column::VulnerabilityId"
        to = "super::vulnerability::Column::Id")]
    Vulnerability,
}

/*
impl Related<package::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Package.def()
    }
}


 */
impl Related<vulnerability::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Vulnerability.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
