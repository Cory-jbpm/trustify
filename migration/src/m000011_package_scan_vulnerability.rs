use crate::m000004_create_package::Package;
use crate::m000006_create_vulnerability::Vulnerability;
use crate::Now;
use sea_orm_migration::prelude::*;
use crate::m000003_scanner::Scanner;

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        // Replace the sample below with your own migration scripts
        manager
            .create_table(
                Table::create()
                    .table(PackageScanVulnerability::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(Package::Id)
                            .integer()
                            .not_null()
                            .auto_increment()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(PackageScanVulnerability::Timestamp)
                            .timestamp_with_time_zone()
                            .default(Func::cust(Now)),
                    )
                    .col(
                        ColumnDef::new(PackageScanVulnerability::PackageId)
                            .integer()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .name("package_id")
                            .from(PackageScanVulnerability::Table, PackageScanVulnerability::PackageId)
                            .to(Package::Table, Package::Id),
                    )
                    .col(
                        ColumnDef::new(PackageScanVulnerability::VulnerabilityId)
                            .integer()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .name("vulnerability_id")
                            .from(
                                PackageScanVulnerability::Table,
                                PackageScanVulnerability::VulnerabilityId,
                            )
                            .to(Vulnerability::Table, Vulnerability::Id),
                    )
                    .col(
                        ColumnDef::new(PackageScanVulnerability::ScannerId)
                            .integer()
                            .not_null(),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .name("fk-scanner_id")
                            .from(
                                PackageScanVulnerability::Table,
                                PackageScanVulnerability::ScannerId,
                            )
                            .to(Scanner::Table, Scanner::Id),
                    )
                    .to_owned(),
            )
            .await
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .drop_table(Table::drop().table(PackageScanVulnerability::Table).to_owned())
            .await
    }
}

#[derive(DeriveIden)]
pub enum PackageScanVulnerability {
    Table,
    Timestamp,
    PackageId,
    VulnerabilityId,
    ScannerId,
}
